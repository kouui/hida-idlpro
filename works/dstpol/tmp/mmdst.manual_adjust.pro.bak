
@mmdst

;------------------------------------------------------------------------
;; UPDATE mmdst
FUNCTION upate_mmdst, dst, telpos, xn, tn, xc, tc, sc

	zd = (dst[0,1]+dst[1,1]/60.+dst[2,1]/3600.)/180.*!pi
	ha = (dst[0,0]+dst[1,0]/60.+dst[2,0]/3600.)/24.*2*!pi	; [hh,mm,ss] -> rad
	if ha gt !pi then ha = ha-2*!pi
	az = (dst[0,9]+dst[1,9]/60.+dst[2,9]/3600.)/180.*!pi
	incli = (dst[0,4]+dst[1,4]/60.+dst[2,4]/3600.)/180.*!pi

   mm = mm_dst(zd, ha, az, incli, telpos, xn, tn, xc, tc, sc=sc)

   return, mm
END

;------------------------------------------------------------------------
;; UPDATE PROFILES
;; s0 (1, npix_y, 4), 4 : I,Q,U,V
FUNCTION upate_profiles, s0, mm
   
   rmm = invert(mm)
   ss = size(s0)
   ny = ss[2]
   s3 = fltarr(1,ny,ss[3])
   for j=0,3 do begin
		s3[*,*,j] = rmm[0,j]*s0[*,*,0]
		for i=1,3 do s3[*,*,j] = s3[*,*,j] + rmm[i,j]*s0[*,*,i]
	endfor
   return, s3
END
;------------------------------------------------------------------------
;; UPDATE PROFILE PLOTS
;; profs (1, npix_y, 4)
PRO upate_profile_plots, wl, profs, wid, init=init, s0=s0, s2=s2
   
   if keyword_set(init) then begin 
      window, wid, xs=1200,ys=850
   endif else begin
      wset, wid
   endelse
	
   color_fix = 'ffc466'x
   ;iprof = reform(profs[0,*,0])
   ;qprof = reform(profs[0,*,1])
   ;uprof = reform(profs[0,*,2])
   ;vprof = reform(profs[0,*,3])
   labels = ['  I','Q/Ic','U/Ic','V/Ic']

   blank=replicate(' ',10)
   wy1=0.22
	box=[0.1,0.,.95,wy1]
	yoff=[0,1,0,1]
   cs=2.2
   for i=0,3 do begin
      prof = reform(profs[0,*,i])
      if i lt 3 then xtickname=blank else UNDEFINE, xtickname
      if i eq 0 then begin
          yr = [0,max(prof)]
          ;;ytext = 1
          plot,wl,prof,pos=box+yoff*(0.1+wy1*(3-i)),/norm,xtickname=xtickname, chars=cs,xstyle=1,yr=yr,ystyle=1
      endif else begin 
          ;;yr = 0.1*[-1,1]
          yabsmax = max(abs(prof))
          yr = yabsmax*[-1,1]
          ;;ytext = yr[1]*0.6
          plot,wl,prof,pos=box+yoff*(0.1+wy1*(3-i)),/norm,xtickname=xtickname, chars=cs,xstyle=1,yr=yr,ystyle=1,/noerase
          oplot,[wl[0],wl[-1]],[0,0],linestyle=1
      endelse
      if keyword_set(s0) then oplot, wl, s0[0,*,i], color=color_fix, linestyle=2
      if keyword_set(s2) and (not keyword_set(init)) then oplot, wl, s2[0,*,i], color=color_fix
      ytext = yr[1]*0.6
      xyouts,wl[0],ytext,labels[i],/data,chars=2.5
   endfor
   

   
END

;------------------------------------------------------------------------
;; RETURN CURSOR CLICK COORDINATE
FUNCTION click_event, wid=wid, msg=msg
	if keyword_set(wid) then wset, wid
   if keyword_set(msg) then print, msg

   cursor,xpos,ypos,/dev,/down
   return, [xpos, ypos]
END
;------------------------------------------------------------------------
;; SELECT X POS WITH CURSOR
;; s4 (npix_x, npix_y, 4), 4 : I,Q,U,V
FUNCTION select_xpos, s4, pmax=pmax, bin=bin, wid=wid, ialog=ialog, islabel=islabel

   if not keyword_set(wid) then wid=0
   if not keyword_set(pmax) then pmax=0.05
   if not keyword_set(bin) then bin=1
   coms = ['I', 'Q', 'U', 'V']

	ss = size(s4)
   if not ss[0] eq 3 then throw_error, "ndim of s4 !=3"
   if not ss[3] eq 4 then throw_error, "size of the 3rd dimension of s4 !=4"
   nx0 = ss[1]
   ny0 = ss[2]
   ns0 = ss[3]
   nx = nx0 / bin
   ny = ny0 / bin
   
   dd = 2
   window,wid,xs=nx*ns0+dd*(ns0-1),ys=ny+dd*2
   ;; show I spectrum image
   x0 = 0
   x0s = [x0,0,0,0]
   y0 = 0
   i2d=congrid(s4[*,*,0],nx,ny)
   if keyword_set(ialog) then tvscls,alog(i2d),x0,y0+dd $
   else tvscls,i2d,x0,y0+dd,sgm=[-3,1]
   if keyword_set(islabel) then xyouts,x0+10,ny-30,coms[0],chars=3,charthick=2,/dev
   right_bounds = [x0 + nx,0,0,0]
   ;; show Q, U, V spectrum image
   for j=1,ns0-1 do begin
		x0 = x0 + nx + dd
		tvscls,congrid(s4[*,*,j],nx,ny),x0,y0+dd,vmin=-pmax,vmax=pmax
		if keyword_set(islabel) then xyouts,x0+10,ny-30,coms[j],chars=3,charthick=2,/dev
	   right_bounds[j] = x0 + nx
      x0s[j] = x0
   endfor

   ;; click and compute x position
   pos = click_event(msg="click left button of the mouse to select a x position ...")
	xpos = pos[0]

   bias = 0
   for j=0,ns0-1 do begin
      if right_bounds[j] gt xpos then break
      bias = bias + (nx+dd)
   endfor

   xpos = xpos - bias
   
;;   print, j, xpos
   for j=0, ns0-1 do begin
      draw, (x0s[j]+xpos)*[1,1], [dd,dd+ny], color=150, thick=2
   endfor
   xpos = xpos*bin
   print, 'select xpos=', xpos
   return, xpos
END

;------------------------------------------------------------------------
PRO mmdst_event, ev
   common dstpol, pars, wds, dst, telpos, s0, wl, s2

	widget_control, ev.id, get_uvalue=value

   case (ev.id) of
		wds.sc : pars.sc = gt_wdtxt(ev.id)
		wds.xn : pars.xn = gt_wdtxt(ev.id)
		wds.tn : pars.tn = gt_wdtxt(ev.id)
		wds.xc : pars.xc = gt_wdtxt(ev.id)
		wds.tc : pars.tc = gt_wdtxt(ev.id)
   endcase
	
	mm = upate_mmdst(dst, telpos, pars.xn, pars.tn, pars.xc, pars.tc, pars.sc)
   s1 = upate_profiles(s0, mm)
	upate_profile_plots, wl, s1, 12, s0=s0, s2=s2
END
;------------------------------------------------------------------------
;; widget layout for sliders
FUNCTION slider_widget,base, pars
  ;--------------------------------------------------------------
  wd={wd_slider, $
    sc:   0l, $
    xn:   0l, $
    tn:   0l, $
    xc:   0l, $
    tc:   0l $
 	}

	
	b1=widget_base(base, /column, /frame)
   dmy = widget_label(b1, value='>>> ... <<<')
	;; sc
   b_row=widget_base(b1, /row)
   dmy = widget_label(b_row, value='sc=')
	wd.SC = CW_FSLIDER(b_row,format='(f8.5)',/edit,/drag,maximum=1.0,minimum=0.0, value=pars.sc)

	;; xn
   b_row=widget_base(b1, /row)
   dmy = widget_label(b_row, value='xn=')
	wd.XN = CW_FSLIDER(b_row,format='(f8.5)',/edit,/drag,maximum=+0.1,minimum=-0.1, value=pars.xn)

	;; tn
   b_row=widget_base(b1, /row)
   dmy = widget_label(b_row, value='tn=')
	wd.TN = CW_FSLIDER(b_row,format='(f8.5)',/edit,/drag,maximum=+50.0*!dtor,minimum=-50.0*!dtor, value=pars.tn)

	;; xc
   b_row=widget_base(b1, /row)
   dmy = widget_label(b_row, value='xc=')
	wd.XC = CW_FSLIDER(b_row,format='(f8.5)',/edit,/drag,maximum=+0.1,minimum=-0.1, value=pars.xc)

	;; tn
   b_row=widget_base(b1, /row)
   dmy = widget_label(b_row, value='tc=')
	wd.TC = CW_FSLIDER(b_row,format='(f8.5)',/edit,/drag,maximum=+50.0*!dtor,minimum=-50.0*!dtor, value=pars.tc)
	return, wd
END
;------------------------------------------------------------------------
;; MAIN PRCEDURE

;; trial@2021.01.23
;; sc = 0.0
;; xn = -0.04200
;; tn = -0.24436
;; xc = -0.02800
;; tc = -0.10474


common dstpol, pars, wds, dst, telpos, s0, wl, s2

DELETE_VARIABLE = 1b

;; wavelength in Angstrom to interpolate initial mmdst parameters
wl0 = 10830

;; s, (nxp,nyp,>4), iquv[r...] after demodulation
;; dst, (3,11), dst status
;; wl, (nxy,), wavelength in Angstrom
savfile ='/nwork/kouui/data-lvl1/dstpol/20220110.giant-prominence/spec/cal/step5.s.ar.sav'
restore, savfile

s4 = s[*,*,0:3] ;; iquv
if DELETE_VARIABLE then UNDEFINE, s
telpos = 'WEST'
xpos = select_xpos(s4, pmax=0.05, wid=11, bin=1, /islabel)
;;xpos = 135
s0 = s4[xpos,*,*] ;; iquv at a single x position

;; initialize
pars_anan = par_dst(wl0, telpos)
pars = {mmdst_pars, sc:0.0, xn:pars_anan.xn, tn:pars_anan.tn, xc:pars_anan.xc, tc:pars_anan.tc}
mm = upate_mmdst(dst, telpos, pars.xn, pars.tn, pars.xc, pars.tc, pars.sc)
s1 = upate_profiles(s0, mm)
s2 = s1
upate_profile_plots,wl,s1,12,s0=s0,s2=s2,/init

if DELETE_VARIABLE then UNDEFINE, mm
if DELETE_VARIABLE then UNDEFINE, s1

base = WIDGET_BASE(title='MANUAL MMDST', /column)
wds=slider_widget(base, pars)
widget_control, base, /realize
XMANAGER, 'mmdst', base

END
